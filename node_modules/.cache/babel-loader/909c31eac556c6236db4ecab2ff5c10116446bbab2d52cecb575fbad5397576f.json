{"ast":null,"code":"var _jsxFileName = \"/Users/hello/assesment/my-react-project/src/pages/login/login.js\";\nimport React from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login() {\n  // Email validation function\n  const validateEmail = (_, value) => {\n    // Regular expression for email validation\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (!value) {\n      return Promise.reject(new Error('Please enter your email.'));\n    }\n    if (!emailRegex.test(value)) {\n      return Promise.reject(new Error('Please enter a valid email address.'));\n    }\n    return Promise.resolve();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '300px',\n      margin: 'auto',\n      marginTop: '100px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      initialValues: {\n        email: ''\n      },\n      onFinish: values => {\n        console.log('Received values of form:', values);\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"email\",\n        rules: [{\n          validator: validateEmail\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"Enter your email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          block: true,\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","Form","Input","Button","jsxDEV","_jsxDEV","Login","validateEmail","_","value","emailRegex","Promise","reject","Error","test","resolve","style","width","margin","marginTop","children","initialValues","email","onFinish","values","console","log","Item","name","rules","validator","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","htmlType","block","_c","$RefreshReg$"],"sources":["/Users/hello/assesment/my-react-project/src/pages/login/login.js"],"sourcesContent":["import React from 'react';\nimport { Form, Input, Button } from 'antd';\n\nfunction Login() {\n  // Email validation function\n  const validateEmail = (_, value) => {\n    // Regular expression for email validation\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n    if (!value) {\n      return Promise.reject(new Error('Please enter your email.'));\n    }\n    if (!emailRegex.test(value)) {\n      return Promise.reject(new Error('Please enter a valid email address.'));\n    }\n\n    return Promise.resolve();\n  };\n\n  return (\n    <div style={{ width: '300px', margin: 'auto', marginTop: '100px' }}>\n      <Form\n        initialValues={{ email: '' }}\n        onFinish={(values) => {\n          console.log('Received values of form:', values);\n        }}\n      >\n        <Form.Item\n          name=\"email\"\n          rules={[\n            {\n              validator: validateEmail,\n            },\n          ]}\n        >\n          <Input placeholder=\"Enter your email\" />\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            Sign In\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default Login;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,KAAK,EAAEC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,SAASC,KAAKA,CAAA,EAAG;EACf;EACA,MAAMC,aAAa,GAAGA,CAACC,CAAC,EAAEC,KAAK,KAAK;IAClC;IACA,MAAMC,UAAU,GAAG,kDAAkD;IAErE,IAAI,CAACD,KAAK,EAAE;MACV,OAAOE,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAC9D;IACA,IAAI,CAACH,UAAU,CAACI,IAAI,CAACL,KAAK,CAAC,EAAE;MAC3B,OAAOE,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,qCAAqC,CAAC,CAAC;IACzE;IAEA,OAAOF,OAAO,CAACI,OAAO,CAAC,CAAC;EAC1B,CAAC;EAED,oBACEV,OAAA;IAAKW,KAAK,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAQ,CAAE;IAAAC,QAAA,eACjEf,OAAA,CAACJ,IAAI;MACHoB,aAAa,EAAE;QAAEC,KAAK,EAAE;MAAG,CAAE;MAC7BC,QAAQ,EAAGC,MAAM,IAAK;QACpBC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,MAAM,CAAC;MACjD,CAAE;MAAAJ,QAAA,gBAEFf,OAAA,CAACJ,IAAI,CAAC0B,IAAI;QACRC,IAAI,EAAC,OAAO;QACZC,KAAK,EAAE,CACL;UACEC,SAAS,EAAEvB;QACb,CAAC,CACD;QAAAa,QAAA,eAEFf,OAAA,CAACH,KAAK;UAAC6B,WAAW,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eAEZ9B,OAAA,CAACJ,IAAI,CAAC0B,IAAI;QAAAP,QAAA,eACRf,OAAA,CAACF,MAAM;UAACiC,IAAI,EAAC,SAAS;UAACC,QAAQ,EAAC,QAAQ;UAACC,KAAK;UAAAlB,QAAA,EAAC;QAE/C;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACI,EAAA,GA3CQjC,KAAK;AA6Cd,eAAeA,KAAK;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}